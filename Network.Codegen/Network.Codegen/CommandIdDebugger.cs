using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Network.Codegen;

/// <summary>
/// Утилита для отладки и мониторинга назначенных ID команд
/// </summary>
internal static class CommandIdDebugger
{
    /// <summary>
    /// Генерирует отладочный файл с информацией о всех назначенных ID команд
    /// </summary>
    /// <param name="context">Контекст генерации</param>
    /// <param name="allCommandNames">Список всех имен команд для генерации отладочной информации</param>
    public static void GenerateDebugInfo(SourceProductionContext context, IEnumerable<string> allCommandNames)
    {
        var commandList = allCommandNames.ToList();
        if (!commandList.Any())
        {
            return;
        }
        
        // Генерируем ID для всех команд
        var allIds = commandList.ToDictionary(name => name, name => CommandIdManager.GetOrAssignId(name));

        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("// Отладочная информация о назначенных ID команд");
        sb.AppendLine("// Этот файл генерируется автоматически для отладки");
        sb.AppendLine();
        sb.AppendLine("/*");
        sb.AppendLine("НАЗНАЧЕННЫЕ ID КОМАНД:");
        sb.AppendLine("======================");
        sb.AppendLine();

        // Группируем команды по типам
        var stateCommands = allIds.Where(kvp => !kvp.Key.Contains(".") && kvp.Key.EndsWith("Command")).ToList();
        var eventCommands = allIds.Where(kvp => !kvp.Key.Contains(".") && kvp.Key.EndsWith("Command")).ToList();
        var targetRpcCommands = allIds.Where(kvp => kvp.Key.StartsWith("TargetRpc.")).ToList();
        var clientRpcCommands = allIds.Where(kvp => kvp.Key.StartsWith("ClientRpc.")).ToList();
        var legacyRpcCommands = allIds.Where(kvp => kvp.Key.Contains(".") && !kvp.Key.StartsWith("TargetRpc.") && !kvp.Key.StartsWith("ClientRpc.")).ToList();

        if (stateCommands.Any() || eventCommands.Any())
        {
            sb.AppendLine("КОМАНДЫ ОТ КЛИЕНТА:");
            foreach (var cmd in allIds.Where(kvp => !kvp.Key.Contains(".")).OrderBy(kvp => kvp.Value))
            {
                sb.AppendLine($"  ID {cmd.Value,3}: {cmd.Key}");
            }
            sb.AppendLine();
        }

        if (targetRpcCommands.Any())
        {
            sb.AppendLine("TARGET RPC КОМАНДЫ:");
            foreach (var cmd in targetRpcCommands.OrderBy(kvp => kvp.Value))
            {
                sb.AppendLine($"  ID {cmd.Value,3}: {cmd.Key}");
            }
            sb.AppendLine();
        }

        if (clientRpcCommands.Any())
        {
            sb.AppendLine("CLIENT RPC КОМАНДЫ:");
            foreach (var cmd in clientRpcCommands.OrderBy(kvp => kvp.Value))
            {
                sb.AppendLine($"  ID {cmd.Value,3}: {cmd.Key}");
            }
            sb.AppendLine();
        }

        if (legacyRpcCommands.Any())
        {
            sb.AppendLine("LEGACY RPC КОМАНДЫ:");
            foreach (var cmd in legacyRpcCommands.OrderBy(kvp => kvp.Value))
            {
                sb.AppendLine($"  ID {cmd.Value,3}: {cmd.Key}");
            }
            sb.AppendLine();
        }

        sb.AppendLine($"ВСЕГО КОМАНД: {allIds.Count}");
        sb.AppendLine();
        sb.AppendLine("ПРИМЕЧАНИЕ: Все команды используют детерминированные ID на основе хеша имени.");
        sb.AppendLine("Это гарантирует одинаковые ID для одних и тех же команд во всех проектах.");
        sb.AppendLine("*/");
        sb.AppendLine();
        sb.AppendLine("namespace Network.Generated");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Константы ID команд для отладки");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    internal static class CommandIds");
        sb.AppendLine("    {");

        foreach (var cmd in allIds.OrderBy(kvp => kvp.Value))
        {
            var constantName = cmd.Key.Replace(".", "_").Replace(" ", "_").ToUpperInvariant();
            sb.AppendLine($"        public const uint {constantName} = {cmd.Value};");
        }

        sb.AppendLine("    }");
        sb.AppendLine("}");

        context.AddSource("CommandIds.Debug.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }

    /// <summary>
    /// Проверяет наличие конфликтов ID и выдает предупреждения
    /// </summary>
    /// <param name="context">Контекст генерации</param>
    /// <param name="allCommandNames">Список всех имен команд для проверки</param>
    public static void ValidateCommandIds(SourceProductionContext context, IEnumerable<string> allCommandNames)
    {
        var collisions = CommandIdManager.CheckCollisions(allCommandNames);

        if (collisions.Any())
        {
            foreach (var collision in collisions)
            {
                var commands = string.Join(", ", collision.Value);
                var descriptor = new DiagnosticDescriptor(
                    "CMD001",
                    "Command ID collision detected",
                    "Multiple commands have the same deterministic ID {0}: {1}. Consider renaming one of the commands.",
                    "Commands",
                    DiagnosticSeverity.Warning, // Предупреждение вместо ошибки, так как коллизии редки
                    true);
                context.ReportDiagnostic(Diagnostic.Create(descriptor, Location.None, collision.Key, commands));
            }
        }
    }
}